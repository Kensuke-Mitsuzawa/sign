#! /usr/bin/python
# -*- coding:utf-8-*-

#------------------------------------------------------------
# KNPの解析結果から述語と格の関係のみを抽出するスクリプト
# 2012/12/31
#------------------------------------------------------------


import sys,codecs,subprocess,readline,re

def juman(word):
    cat = ""
    domain = ""

    echo = subprocess.Popen(['echo',word],
                            stdout=subprocess.PIPE,
                            )


    juman = subprocess.Popen(['juman'], 
                             stdin=echo.stdout,
                             stdout=subprocess.PIPE,
                             )


    end_of_pipe_tab = juman.stdout

    for result in end_of_pipe_tab:
        result_list = result.split()


        for detail in result_list:
            
            if not re.findall(r"カテゴリ:",detail) == []:
                detail = detail.strip('"')
                cat = detail

            if not re.findall(r"ドメイン:",detail) == []:
                detail = detail.strip('"')
                domain = detail

    return cat,domain

def Syori(clause_list,clause_num,clause):
    #clause_listは節ごとに切った解析結果、clause_numは節の数、clauseは各節が何行分の情報を持っているか？リスト
    #print "--------------------"

    #カウンターの設置
    counter = 0

    #語の並び情報(order)
    order = 0
    
    #ここで新しい節を読みおなし
    for value in clause:

        if counter == 0:
            start_pos = 1
            end_pos = value

        else:
            start_pos = end_pos + 1
            end_pos = end_pos + value

        counter += 1
        
        #print "below sentence is result of KNP"        
        #情報の抽出を正規表現でしていく
        for i in range(start_pos,end_pos + 1):
            sentence = clause_list[i]

            #print sentence


            #-----------------------------------------------------------
            # KNPの解析結果のうち、述語の、述語と格の関係のみを記述した行のみを正規表現で切り出し

            if not re.findall(r"\+.*D",sentence) == []:
                
                if not re.findall(r"<格解析結果:.*?>",sentence) == []:
                    

                    analysis_result = re.findall(r"<格解析結果:.*?>",sentence)

                    analysis_result = "".join(sentence)
                    # <が邪魔なので切る
                    a_r_list = analysis_result.split("<")
            
    #-----------------------------------------------------------
    # 切り出された行から、さらに述語と格関係のみの箇所を切り出す
    for i in range(len(a_r_list)):
        tmp = a_r_list[i]
        tmp = tmp.strip(">")
        if not re.findall("格解析結果:.*",tmp) == []:
            print_list = []
            a_r = a_r_list[i]
            
            case_relation_list = a_r.split(":")
            predicate = case_relation_list[1] 
            case = case_relation_list[3]
            each_case_list = case.split(";")

            for ii in range(len(each_case_list)):
                each_case = each_case_list[ii]
                list = each_case.split("/")

                case = list[0]
                word_to_case = list[2]

               
                if not word_to_case == "-":

                    category,domain = juman(word_to_case)
                    format = case+" "+word_to_case+" "+category+" "+domain
                    print_list.append(format)

                #-----------------------------------------------------------
                #以下は不要な部分なので、すべてコメントオフ
                #現在のところ、残しているが、消してもいいだろう。 
                '''
                if not re.findall(r"ガ",each_case_list[ii]) == []:
                    ga = each_case_list[ii]
                    ga = (ga.split("/"))[0]+" "+(ga.split("/"))[2]

                if not re.findall("ヲ",each_case_list[ii]) == []:
                    wo = each_case_list[ii]
                    wo = (wo.split("/"))[0]+" "+(wo.split("/"))[2]
            
                if not re.findall("ニ",each_case_list[ii]) == []:
                    ni = each_case_list[ii]
                    ni = (ni.split("/"))[0]+" "+(ni.split("/"))[2]           

                if not re.findall("デ",each_case_list[ii]) == []:
                    de = each_case_list[ii]
                    de = (de.split("/"))[0]+" "+(de.split("/"))[2]

                if not re.findall("カラ",each_case_list[ii]) == []:
                    kara = each_case_list[ii]
                    kara = (kara.split("/"))[0]+" "+(kara.split("/"))[2]

                if not re.findall("ヨリ",each_case_list[ii]) == []:
                    yori = each_case_list[ii]
                    yori = (yori.split("/"))[0]+" "+(yori.split("/"))[2]
            
                if not re.findall("時間",each_case_list[ii]) == []:
                    time = each_case_list[ii]
                    time = (time.split("/"))[0]+" "+(time.split("/"))[2]

                if not re.findall("外の関係",each_case_list[ii]) == []:
                    outside = each_case_list[ii]
                    outside = (outside.split("/"))[0]+" "+(outside.split("/"))[2]

                if not re.findall("ノ",each_case_list[ii]) == []:
                    no = each_case_list[ii]
                    no = (no.split("/"))[0]+" "+(no.split("/"))[2]
                    
                if not re.findall("ニタイスル",each_case_list[ii]) == []:
                    taisuru = each_case_list[ii]
                    taisuru = (taisuru.split("/"))[0]+" "+(taisuru.split("/"))[2]
                
                if not re.findall("修飾",each_case_list[ii]) == []:
                    modify = each_case_list[ii]
                    modify = (modify.split("/"))[0]+" "+(modify.split("/"))[2]

                if not re.findall("ニカワル",each_case_list[ii]) == []:
                    kawaru = each_case_list[ii]
                    kawaru = (kawaru.split("/"))[0]+" "+(kawaru.split("/"))[2]

                if not re.findall("へ",each_case_list[ii]) == []:
                    he = each_case_list[ii]
                    he = (he.split("/"))[0]+" "+(he.split("/"))[2]

                if not re.findall("ト",each_case_list[ii]) == []:
                    to = each_case_list[ii]
                    to = (to.split("/"))[0]+" "+(to.split("/"))[2]

                if not re.findall("マデ",each_case_list[ii]) == []:
                    made = each_case_list[ii]
                    made = (made.split("/"))[0]+" "+(made.split("/"))[2]

                if not re.findall("トスル",each_case_list[ii]) == []:
                    tosuru = each_case_list[ii]
                    tosuru = (tosuru.split("/"))[0]+" "+(tosuru.split("/"))[2]




            
            #-----------------------------------------------------------


    #最後に、出力
    print predicate,"\t",ga,"\t",wo,"\t",ni,"\t",de,"\t",kara,"\t",yori,"\t",time,"\t",outside,"\t",no,"\t",taisuru,"\t",modify,"\t",kawaru
                
'''
    print_format = "\t".join(print_list)
    print print_format

def clause_count(tmp_list):
## 節の数と各節が何行文の情報を持っているのか調べる関数    

    ## clause_numは節の数,リストclauseは各節が何行の情報を持っているか。
    clause_num = 0
    clause = []
    c_num = -1

    #print "-----------------------------"

    for tmp in tmp_list:
 
       
        if tmp == "*":   
            ## 前の節が何行分の情報を持っていたか。リストに追加する
            clause.append(c_num)
            
            ## c_numの数を初期化
            c_num = 1
            
            ## clause_numの数をひとつ増やす
            clause_num += 1
            
        ## 処理の都合上、最後の節はカウントできないので、無理やりだけど、こうする 
        elif tmp == "EOS\n":
            
            ## EOSの前には。、？！の記号しかないと仮定して-1する
            c_num = c_num - 1
            clause.append(c_num)

        else:            
            c_num += 1

    clause.pop(0)
    #print "Number of Clauses is",clause_num
    #print "List of lines in each clause",clause

    return clause_num,clause


def knp_tab(sentence):

    tmp_list = []
    clause_list = []

    echo = subprocess.Popen(['echo',sentence],
                            stdout=subprocess.PIPE,
                            )


    juman = subprocess.Popen(['juman'], 
                             stdin=echo.stdout,
                             stdout=subprocess.PIPE,
                             )


    knp = subprocess.Popen(['knp','-case','-tab'],
                           stdin = juman.stdout,
                           stdout=subprocess.PIPE,
                           )


    end_of_pipe_tab = knp.stdout

    for line in end_of_pipe_tab:
        #print line
        line_split = line.split(" ")
        tmp_list.append(line_split[0])
        clause_list.append(line)
        
    #ここで各処理関数に情報を投げる
    clause_num, clause = clause_count(tmp_list)
    Syori(clause_list,clause_num,clause)



if __name__ == '__main__':

    sentence = sys.argv[2]
    knp_tab(sentence)
    
         



